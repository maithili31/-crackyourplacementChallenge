class Solution {
public:

    void merge(vector<int>& nums,int low,int mid,int high,int& count){
        int j=mid+1;
        for(int i=low;i<=mid;i++){
            while(j<=high && nums[i]>2*(long long)nums[j]){
                j++;
            }
            count+=j-(mid+1);
        }
        int n=high-low+1;
        vector<int> temp(n,0);
        int left=low,right=mid+1,k=0;
        while(left<=mid && right<=high){
            if(nums[left]<nums[right]){
                temp[k]=nums[left];
                k++;
                left++;
            } else {
                temp[k]=nums[right];
                k++;
                right++;
            }
        }
        while(left<=mid){
            temp[k]=nums[left];
            k++;
            left++;
        }
        while(right<=high){
            temp[k]=nums[right];
            k++;
            right++;
        }
        int m=0;
        for(int i=low;i<=high;i++){
            nums[i]=temp[m++];
        }
    }

    void mergeSort(vector<int>& nums, int low,int high,int& count){
        if(low>=high){
            return;
        }
        int mid=(low+high)/2;
        mergeSort(nums,low,mid,count);
        mergeSort(nums,mid+1,high,count);
        merge(nums,low,mid,high,count);
    }

    int reversePairs(vector<int>& nums) {
        // brute force approach- giving TLE
        // long long int count=0;
        // for(int i=0;i<nums.size();i++){
        //     for(int j=i+1;j<nums.size();j++){
        //         if(nums[i]>(2*(long long)nums[j])){
        //             count++;
        //         }
        //     }
        // }
        // return count;

        // optimal approach
        int count=0;
        mergeSort(nums,0,nums.size()-1,count);
        return count;
    }
};